{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/Latest-technology-updates","result":{"data":{"markdownRemark":{"id":"219b4a12-17f2-5c58-a60c-a2632f27548e","html":"<h3 id=\"새로운-프로젝트와의-만남\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%99%80%EC%9D%98-%EB%A7%8C%EB%82%A8\" aria-label=\"새로운 프로젝트와의 만남 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 프로젝트와의 만남</h3>\n<p>2023년 말 이직을 했고 새로운 프로젝트를 만났다. 새로운 프로젝트는 turbo repo로 웹, 앱 그외의 package들이 함께 있는 모노레포 형태였고, 메인 프로젝트는 SSR이 없는 Vite + React + TS의 스택을 쓰고 있었다.</p>\n<h4 id=\"eslint--prettier을-biome으로-전환\" style=\"position:relative;\"><a href=\"#eslint--prettier%EC%9D%84-biome%EC%9C%BC%EB%A1%9C-%EC%A0%84%ED%99%98\" aria-label=\"eslint  prettier을 biome으로 전환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eslint + Prettier을 Biome으로 전환</h4>\n<p>기존 프로젝트는 Eslint는 거의 사용하지 않고 사실 상 Prettier만 사용하고 있었는데, 이걸 Biome으로 교체했다. Biome은 linter와 formatter의 역할을 동시에 수행하는 툴로 Rust로 작성되었다. 일단 장점은 빠르고… 빠르고, 그리고 빠르다! 린터와 포맷터의 역할을 둘 다 하기 때문에 Biome을 사용하면 Eslint를 사용할 때 줄줄이 달고 다니던 Plugin들을 없앨 수 있다. 단점이라면 Biome에서 제공하는 룰안에서 세팅을 지정하기 때문에 Eslint Plugin을 통해 세세한 룰 세팅을 선호는 사람이라면 Biome의 룰들이 부족하게 느껴질 수 있겠다.</p>\n<h4 id=\"yarn-classic에서-pnpm으로-전환\" style=\"position:relative;\"><a href=\"#yarn-classic%EC%97%90%EC%84%9C-pnpm%EC%9C%BC%EB%A1%9C-%EC%A0%84%ED%99%98\" aria-label=\"yarn classic에서 pnpm으로 전환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Yarn Classic에서 Pnpm으로 전환</h4>\n<p>Yarn Classic은 다소 느리고 유령의존성 문제가 있기 때문에 패키지 매니저를 교체하고 싶었고 선택할 수 있는 옵션으로는 크게 Yarn Berry와 Pnpm이 있었으나 Turbo Repo에서는 Yarn berry의 Plug’n’Play 모드를 지원하지 않기 때문에 사실상 선택지는 Pnpm 하나 뿐이었다. 결과적으로 Pnpm으로 잘 전환했고 이와 관련한 글을 작성하려고 하는데 음 언제쓰지? 🤔</p>\n<h4 id=\"react-16에서-18로-버전-업데이트\" style=\"position:relative;\"><a href=\"#react-16%EC%97%90%EC%84%9C-18%EB%A1%9C-%EB%B2%84%EC%A0%84-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"react 16에서 18로 버전 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 16에서 18로 버전 업데이트</h4>\n<p>pnpm으로 마이그레이션하면서 React의 버전도 16에서 18로 업데이트했다. 그 과정에서 다른 라이브러리와 호환성이 안맞는것 같아 React 버전을 이리 바꾸고 저리 바꾸는 고군분투의 과정이 있었는데 그 과정에서 <a href=\"https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">New JSX Transform</a> 이슈와 만나게 됐다.</p>\n<p>문제인즉슨 메인 프로젝트의 Package.json에서는 React 16.9 버전을 사용하는 것으로 되어있었으나 유령의존성으로 인해 실제는 Packages에서 사용하는 React 17에 의존하고 있었다. 따라서 메인프로젝트에서 React 17에서 제공하는 New JSX Transform으로 <code class=\"language-text\">import React from 'react'</code> 구문없이 JSX 사용이 가능했으나, pnpm으로 변환하면서 유령의존성이 사라지고 본래대로 package.json에 적혀있던 16.9 버전에 의존하게 되면서 에러가 터지게 된 것이였다.</p>\n<p>이 문제를 해결하면서 <a href=\"https://so-so.dev/react/import-react-from-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">그 많던 import React from ‘react’는 어디로 갔을까</a> 이 블로그 글의 도움을 많이 받았는데, 여담이지만 신기하게도 내가 무언가가 궁금해서 찾다보면 항상 이 블로그에서 도움을 많이 받게 되더라. 신기방기 🤫 이 블로그를 일부러 찾아들어간게 아니라 정보를 막 찾다가 ‘앗 내가 필요한 글이다’ 라고 생각하고 보면 이 블로그인 경우가 많았다. 나중엔 내 블로그도 이런 역할을 했음 좋겠단 작은 소망이 있다.</p>\n<p>또 React 버전을 업데이트하면서 만나게 된 이슈는 <a href=\"https://github.com/reactwg/react-18/discussions/21\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Automatic batching for fewer renders in React 18</a>와 관련되어 있는데, 레거시 코드 중 setState 함수를 동기적으로 사용하도록 의도된 코드가 있었는데 React 18의 <code class=\"language-text\">createRoot</code>를 사용하게 되면서 auto batching 되어 문제가 되었던 것이다. 나는 무조건 React가 setState를 batching 처리 하는 것으로 알고 있었는데 React 18 이전에서는 React 이벤트 핸들러 내부에서 발생하는 업데이트만 배칭을 하였다, 는 것을 알게 되었다.</p>\n<p>라이브러리를 하나 fork 하기도 했는데 <code class=\"language-text\">react-sortable-tree</code>라고 프로젝트에서 핵심적으로 쓰고 있는 라이브러리인데 3년전 부터 업데이트가 없고 (메인테이너야 어디갔니…) React 17 이후 버전을 지원하지 못하고 있어서 fork 뜬 뒤 React 18을 지원할 수 있도록 커스텀했다. 대체할 만한 다른 라이브러리가 있는지도 찾아보았지만 <code class=\"language-text\">react-sortable-tree</code>가 제공하는 편의사항(API)를 커버할만한 대체 라이브러리를 찾지 못했다. 🥲 <code class=\"language-text\">react-sortable-tree</code>를 커스텀 하는 것이 가장 빠른 방법인 듯한데, 기왕에 커스텀 하게 된 거 디자인이나 성능 부분도 좀 더 디벨롭해보면 좋을 듯 싶다.</p>\n<h3 id=\"기술탐구와-블로그에-글쓰기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%88%A0%ED%83%90%EA%B5%AC%EC%99%80-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-%EA%B8%80%EC%93%B0%EA%B8%B0\" aria-label=\"기술탐구와 블로그에 글쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기술탐구와 블로그에 글쓰기</h3>\n<p>일단 Pnpm 전환기에 대한 글을 써야하고 사실 작년부터 TreeShaking에 대한 글을 하나 쓰려고 준비 중이였는데 계속 미루고 있다. (요거 파보는 과정에서 TreeShaking을 지원하는 UI 라이브러리도 하나 만들었는데) 이거 말고도 글로 쓰고 싶은 주제들은 꽤 많은데 다 쓰려면 좀 더 부지런을 떨어야 한다. 쨌든 TreeShaking에 이어서 번들러에 많은 관심을 가지고 있고, RSC도 나에겐 아직 탐구 대상이다.</p>\n<h3 id=\"기술-서적-읽기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%88%A0-%EC%84%9C%EC%A0%81-%EC%9D%BD%EA%B8%B0\" aria-label=\"기술 서적 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기술 서적 읽기</h3>\n<p>개인적으로는 올해 기술서적 10개 읽기가 목표인데 작년 연말즈음 이펙티브 타입스크립트를 완독했고, 이 후 한 번 더 가볍게 2회독 했다.</p>\n<p>그 후에 읽은 것들은</p>\n<ul>\n<li>쏙쏙 들어오는 함수형 코딩</li>\n<li>그림과 작동원리로 쉽게 이해하는 AWS 구조와 서비스</li>\n<li>혼자서 공부하는 컴퓨터 구조 + 운영체제 (읽는중)</li>\n</ul>\n<p>이다. 쏙쏙 책은 설명을 정말 쉽게 잘 풀어서 써 놓은데다가 내용 자체가 유익했고, AWS 책은 전반적으로 AWS가 제공하는 서비스들에 대해서 쓱 훑어보고 싶어서 고른 책이였는데 나쁘지 않았다. 그치만 VPC에 대해서 자세히 알고 싶다면 다른 책을 읽어야 할 듯.</p>\n<p>혼자서 공부하는 컴퓨터 구조 + 운영체제는 지금 읽으면 이해도 더 잘 되고 도움이 될 것 같아서 읽고 있다. CS 기초 지식이야 알아두면 어떻게든 도움이 되겠지만, 과거에는 내가 코드를 치고 구현하는 것과 조금 동떨어진 지식인 것 같기도 하고 내가 알고 있는 지식과의 연결고리를 만들기가 어려워 선뜻 손이 가지 않았는데 최근에는 이래저래 읽는 아티클들에서 CS와 관련된 용어들이 자주 등장하다보니 지금쯤 읽어두면 좋지 않을까 싶어서 선택했다.</p>\n<p>아 진짜 사놓고 안 읽은 책도 많고 앞으로 읽고 싶은 책도 많은데 뇌가 한 세 개쯤 되었으면 좋겠다!</p>","fields":{"slug":"/posts/2024-01-28---최근-기술-근황//posts/Latest-technology-updates","tagSlugs":null},"frontmatter":{"date":"2024-01-28","description":"근래에 나는 기술적으로 무얼했을까","tags":null,"title":"최근 기술 근황","socialImage":null}}},"pageContext":{"slug":"/posts/2024-01-28---최근-기술-근황//posts/Latest-technology-updates"}},"staticQueryHashes":["1342736242","251939775","401334301","63107425"]}